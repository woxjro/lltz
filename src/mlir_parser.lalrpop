use crate::mlir::dialect::michelson::ast::{Type as MType, Tok};
use crate::mlir::dialect::func::ast::{Type as FType};
use crate::mlir::ast::{Type};
grammar;

pub MType: MType = {
    <address:Address> => MType::Address,
    <bytes:Bytes> => MType::Bytes,
    <unit:Unit> => MType::Unit,
    <int:Int> => MType::Int,
    <nat:Nat> => MType::Nat,
    <mutez:Mutez> => MType::Mutez,
    <operation:Operation> => MType::Operation,
    <list:List> "<" <ty:MType> ">" => MType::List { ty: Box::new(ty) },
    <option:Option> "<" <ty:MType> ">" => MType::Option { ty: Box::new(ty) },
    <option:Contract> "<" <ty:MType> ">" => MType::Contract { ty: Box::new(ty) },
    <pair:Pair> "<" <ty1:MType> "," <ty2:MType> ">" => MType::Pair { ty1: Box::new(ty1), ty2: Box::new(ty2) }
};

pub FType: FType = {
    "(" <param: MType> "," <storage: MType> ")" "->" <result: MType> =>
        FType::Function {
            arguments: vec![Type::Michelson(param), Type::Michelson(storage)],
            results: vec![Type::Michelson(result)]
        },
}

Unit: Tok = <s:r"[!][a-zA-Z]+[.]unit"> => Tok::Unit;
Address: Tok = <s:r"[!][a-zA-Z]+[.]address"> => Tok::Address;
Bytes: Tok = <s:r"[!][a-zA-Z]+[.]bytes"> => Tok::Bytes;
Option: Tok = <s:r"[!][a-zA-Z]+[.]option"> => Tok::Option;
Mutez: Tok = <s:r"[!][a-zA-Z]+[.]mutez"> => Tok::Mutez;
Int: Tok = <s:r"[!][a-zA-Z]+[.]int"> => Tok::Int;
Nat: Tok = <s:r"[!][a-zA-Z]+[.]nat"> => Tok::Nat;
Contract: Tok = <s:r"[!][a-zA-Z]+[.]contract"> => Tok::Contract;
Operation: Tok = <s:r"[!][a-zA-Z]+[.]operation"> => Tok::Operation;
List: Tok = <s:r"[!][a-zA-Z]+[.]list"> => Tok::List;
Pair: Tok = <s:r"[!][a-zA-Z]+[.]pair"> => Tok::Pair;
