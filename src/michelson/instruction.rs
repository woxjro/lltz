pub enum Instruction {
    //Control Structures
    //APPLY,
    //EXEC,
    //FAILWITH,
    If {
        instr1: Vec<Instruction>,
        instr2: Vec<Instruction>,
    },
    //IF_CONS instr1 instr2,
    //IF_LEFT instr1 instr2,
    //IF_NONE instr1 instr2,
    //ITER inster,
    //LAMBDA ty1 ty2 instr,
    //LOOP instr,
    //LOOP_LEFT instr,
    //instr1 ; instr2,
    //{},
    //Operations on data structures
    Car,
    Cdr,
    //CONCAT,
    //CONS,
    EmptyBigMap,
    EmptyMap,
    EmptySet,
    Get,
    GetN {
        n: usize,
    },
    GetAndUpdate,
    //LEFT ty2,
    //MAP instr,
    Mem,
    Never,
    //NIL ty,
    //NONE ty,
    Pack,
    //PAIR
    //PAIR n,
    //RIGHT ty1,
    //SIZE,
    //SLICE,
    Some,
    //UNIT,
    //UNPACK ty,
    Unpair,
    //UNPAIR n,
    Update,
    //UPDATE n,
    //Blockchain operations
    //ADDRESS,
    //AMOUNT,
    //BALANCE,
    //CHAIN_ID,
    ////CONTRACT ty,
    //CREATE_CONTRACT { parameter ty1; storage ty2; code instr1 },
    //IMPLICIT_ACCOUNT,
    //LEVEL,
    //NOW,
    //SELF,
    //SELF_ADDRESS,
    //SENDER,
    //SET_DELEGATE,
    //SOURCE,
    //TOTAL_VOTING_POWER,
    //TRANSFER_TOKENS,
    //VOTING_POWER,
    ////Operations on tickets
    //JOINT_TICKETS,
    //READ_TICKET,
    //SPLIT_TICKET,
    //TICKET,
    //Cryptographic operations
    //BLAKE2B,
    //CHECK_SIGNATURE,
    //HASH_KEY,
    //KECCAK,
    //PAIRING_CHECK,
    //SAPLING_EMPTY_STATE,
    //SAPLING_VERIFY_UPDATE,
    //SHA256,
    //SHA3,
    //SHA512,
    //Boolean operations
    And,
    Not,
    Or,
    Xor,
    //Arithmetic operations
    //ABS,
    Add,
    Compare,
    //EDIV,
    Eq,
    //GE,
    //GT,
    //INT,
    //ISNAT,
    //LE,
    //LSL,
    //LSR,
    //LT,
    Mul,
    //NEG,
    //NEQ,
    Sub,
    //Stack manipulation
    DigN {
        n: usize,
    },
    DugN {
        n: usize,
    },
    Dip,
    DipN {
        n: usize,
    },
    Dup,
    DupN {
        n: usize,
    },
    Push,
    Drop,
    Swap,
}

#[allow(dead_code)]
fn to_string(instr: Instruction) -> String {
    match instr {
        //Control Structures
        //APPLY,
        //EXEC,
        //FAILWITH,
        //Instruction::If { instr1, instr2 } => "IF".to_string(),
        //IF_CONS instr1 instr2,
        //IF_LEFT instr1 instr2,
        //IF_NONE instr1 instr2,
        //ITER inster,
        //LAMBDA ty1 ty2 instr,
        //LOOP instr,
        //LOOP_LEFT instr,
        //instr1 ; instr2,
        //{},
        //Operations on data structures
        //CAR,
        //CDR,
        //CONCAT,
        //CONS,
        //EMPTY_BIG_MAP,
        //EMPTY_MAP,
        //EMPTY_SET,
        //GET,
        //GET {
        //n: usize,
        //},
        //GET_AND_UPDATE,
        //LEFT ty2,
        //MAP instr,
        //MEM,
        //NEVER,
        //NIL ty,
        //NONE ty,
        //PACK,
        //PAIR
        //PAIR n,
        //RIGHT ty1,
        //SIZE,
        //SLICE,
        //SOME,
        //UNIT,
        //UNPACK ty,
        //UNPAIR,
        //UNPAIR n,
        //UPDATE,
        //UPDATE n,
        //Blockchain operations
        //ADDRESS,
        //AMOUNT,
        //BALANCE,
        //CHAIN_ID,
        ////CONTRACT ty,
        //CREATE_CONTRACT { parameter ty1; storage ty2; code instr1 },
        //IMPLICIT_ACCOUNT,
        //LEVEL,
        //NOW,
        //SELF,
        //SELF_ADDRESS,
        //SENDER,
        //SET_DELEGATE,
        //SOURCE,
        //TOTAL_VOTING_POWER,
        //TRANSFER_TOKENS,
        //VOTING_POWER,
        ////Operations on tickets
        //JOINT_TICKETS,
        //READ_TICKET,
        //SPLIT_TICKET,
        //TICKET,
        //Cryptographic operations
        //BLAKE2B,
        //CHECK_SIGNATURE,
        //HASH_KEY,
        //KECCAK,
        //PAIRING_CHECK,
        //SAPLING_EMPTY_STATE,
        //SAPLING_VERIFY_UPDATE,
        //SHA256,
        //SHA3,
        //SHA512,
        //Boolean operations
        //AND,
        //NOT,
        //OR,
        //XOR,
        //Arithmetic operations
        //ABS,
        //ADD,
        //COMPARE,
        //EDIV,
        //EQ,
        //GE,
        //GT,
        //INT,
        //ISNAT,
        //LE,
        //LSL,
        //LSR,
        //LT,
        //MUL,
        //NEG,
        //NEQ,
        //SUB,
        //Stack manipulation
        //DIG {
        //n: usize,
        //},
        //DUG {
        //n: usize,
        //},
        //DIP,
        //DIP {
        //n: usize,
        //},
        //DUP,
        //DUP {
        //n: usize,
        //},
        //PUSH,
        //DROP,
        //SWAP,
        _ => "".to_string(),
    }
}
